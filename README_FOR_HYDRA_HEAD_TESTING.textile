h1.  Testing the Hydra-Head Engines Plugin

See the basic README file for more information about hydra-plugin_test_host


h3. You must follow the initial installation instructions in the basic README.

h4. (0) It is expected that you have both RVM and Ruby enterprise edition installed.

See https://rvm.beginrescueend.com/

If you don't have the desired ruby version in RVM, e.g. ree-1.8.7, then install it.

<pre>
  rvm install ree-1.8.7
</pre>


h4. (1) Switch to the testing branch

We use a git BRANCH for testing:

<pre>
  git checkout installed-plugin
</pre>

h4. (2) Use the RVM gemset for your local hydra application

<pre>
  . .rvmrc
</pre>

You should get a message like this:
 Using /usr/local/you/.rvm/gems/ree-1.8.7-2010.02 with gemset hyhead-rails2-plugin-app

h4. (3) Pull a copy of jetty pre-configured for Hydra with Fedora and Solr installed.

<pre>
  git submodule init jetty
  git submodule update
</pre>


h4. (4) Pull a copy of the hydra-head rails 2 engines plugin

<pre>
  git submodule init vendor/plugins/hydra-head/
  git submodule update vendor/plugins/hydra-head/
</pre>


h4. (5) Use bundler to install the gem dependencies.

<pre>
  bundle install
</pre>

You may need to install bundler into the gemset first:

<pre>
  gem install bundler
</pre>


h4. (6) Migrate the test databases

See below to reset the test databases when re-running tests.

NOTE: to ensure that the tests do not rely on non-test data, do this first:

<pre>
  rake db:drop:all
</pre>

<pre>
  rake db:migrate:all RAILS_ENV=test  
</pre>


h4. (7) Start jetty

See below to reset jetty when re-running tests, or when running a simultaneous development instance.

Ensure nothing is running on port 8983.

Note that java 1.6 must be invoked by the "java" command or Hydrangea won't work.

<pre>
  rake hydra:jetty:load RAILS_ENV=test
</pre>

This will start up jetty on port 8983.


h4. (8) Load test fixtures into Fedora/Solr.

NOTE: to ensure that the tests do not rely on non-test data, do this first: 

<pre>
  rake hydra:default_fixtures:delete
</pre>

<pre>
  rake hydra:default_fixtures:refresh environment=test
</pre>

(TO DO: get rid of irrelevant fixtures; get rid of non-generic fixtures.)


h4. (9) Run specs.

<pre>
  rake hydra_head:rspec
</pre>


h3. Don't forget to stop jetty.

It's easy to forget a running jetty, start another jetty process, 
and then get confusing behavior because you have two jetty instances on the
same port.

To stop jetty:
From the rails application directory  (my-hydra-head-test-app)

<pre>
  rake hydra:jetty:stop
</pre>

Use ps to ensure the java process has stopped.  If not, kill it manually.


h3. If you need to Re-run the tests:

h4. Clean out the databases:

<pre>
  rake db:drop RAILS_ENV=test
    or
  rake db:drop:all   (to ensure that the tests do not rely on non-test data)
</pre>

<pre>
  rake db:migrate:all RAILS_ENV=test  
</pre>


h4. Clean out the fixtures:

1. Stop jetty

<pre>
  rake hydra:jetty:stop
</pre>

Use ps to ensure the java process has stopped.  If not, kill it manually.

2. Clean out Solr and Fedora on Jetty

(Note:  this will also wipe out the development data until we use the single solr instance of hydra-jetty)

TODO: can this be a single rake task?

<pre>
  cd jetty
  git clean -df
  git checkout .
  git status     should show nothing to commit
  cd ..   (back to root of the _plugin_)
</pre>

3. Re-initialize and start Jetty:

<pre>
  rake hydra:jetty:load
</pre>

4. Reload the pristine fixtures.
NOTE: to ensure that the tests do not rely on non-test data, do this first:

<pre>
  rake hydra:default_fixtures:delete
</pre>

<pre>
  rake hydra:default_fixtures:refresh environment=test
</pre>
